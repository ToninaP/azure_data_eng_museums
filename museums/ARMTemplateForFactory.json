{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "museums"
		},
		"AzureFunction1_functionKey": {
			"type": "secureString",
			"metadata": "Secure string for 'functionKey' of 'AzureFunction1'"
		},
		"AzureFunction1_properties_typeProperties_functionAppUrl": {
			"type": "string",
			"defaultValue": "https://museums-scraping.azurewebsites.net"
		},
		"BlobStorageRaw_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "https://museumsdatalakeraw.blob.core.windows.net/"
		},
		"BlobStorageStandardized_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "https://museumsdatalakeraw.blob.core.windows.net/"
		},
		"GitHub_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://raw.githubusercontent.com/"
		},
		"LS_KiasmaAPI_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://www.kansallisgalleria.fi/api/v1/objects"
		},
		"LS_all_apis_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().BaseURL}"
		},
		"museums_csv_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().BaseURL}"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ingest_museums_csv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"description": "Fetch URL data",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "rawCSVpaths",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "loop over URLs",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data from URLs to Blob Storage-raw",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings",
												"copyBehavior": "PreserveHierarchy"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": false,
										"dataIntegrationUnits": 4,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "all_csv_files_github",
											"type": "DatasetReference",
											"parameters": {
												"BaseURL": {
													"value": "@item().BaseURL",
													"type": "Expression"
												},
												"RelativeURL": {
													"value": "@item().RelativeURL",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "all_csv_files_blob_raw",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@item().FileName",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/rawCSVpaths')]",
				"[concat(variables('factoryId'), '/datasets/all_csv_files_github')]",
				"[concat(variables('factoryId'), '/datasets/all_csv_files_blob_raw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_museums_json')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get_API_links",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "raw_api_links",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Loop over APIs",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get_API_links",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get_API_links').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data2",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET"
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "all_api_files_raw",
											"type": "DatasetReference",
											"parameters": {
												"RelativeURL": {
													"value": "@item().RelativeURL",
													"type": "Expression"
												},
												"BaseURL": {
													"value": "@item().BaseURL",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "all_api_files_json",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@item().FileName",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/raw_api_links')]",
				"[concat(variables('factoryId'), '/datasets/all_api_files_raw')]",
				"[concat(variables('factoryId'), '/datasets/all_api_files_json')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/raw_transformation_format')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "kiasma_raw_to_parquet",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "kiasma_raw_to_parquet",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"kiasmaRaw": {},
									"kiasmaRawDimensions": {},
									"kiasmaRawMedium": {},
									"Ateneum": {},
									"Kiasma": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "smk_raw_to_parquet",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "kiasma_raw_to_parquet",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "smk_raw_to_parquet",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"artists": {},
									"artworks": {},
									"artworksDimensions": {},
									"SMK": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "met_raw_to_parquet",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "smk_raw_to_parquet",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "met_raw_to_parquet",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"metRaw": {},
									"MET": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/kiasma_raw_to_parquet')]",
				"[concat(variables('factoryId'), '/dataflows/smk_raw_to_parquet')]",
				"[concat(variables('factoryId'), '/dataflows/met_raw_to_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/scraping_pipeline_test')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Azure Function1",
						"type": "AzureFunctionActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "moderna",
							"headers": {},
							"method": "GET"
						},
						"linkedServiceName": {
							"referenceName": "AzureFunction1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "saveOutput",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Azure Function1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "PUT",
							"headers": {
								"x-ms-blob-type": "BlockBlob"
							},
							"url": "https://museumsdatalakeraw.blob.core.windows.net/raw/scraped/moderna.json?sp=racw&st=2025-04-04T23:56:04Z&se=2025-04-05T07:56:04Z&sv=2024-11-04&sr=c&sig=leibeUxieDFVZsOkGpWHQkwV2LwmIe%2FfPVxMfigCs1s%3D",
							"body": {
								"value": "@activity('Azure Function1').output.Response",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Response": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureFunction1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/KiasmaDS_API')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_KiasmaAPI",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_KiasmaAPI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/NGA_GitHub_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "GitHub",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": "NationalGalleryOfArt/opendata/refs/heads/main/data/objects.csv"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/GitHub')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/NGA_artworks')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BlobStorageRaw",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "nga_artworks.csv",
						"folderPath": "open access",
						"container": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Object Number",
						"type": "String"
					},
					{
						"name": "Is Highlight",
						"type": "String"
					},
					{
						"name": "Is Timeline Work",
						"type": "String"
					},
					{
						"name": "Is Public Domain",
						"type": "String"
					},
					{
						"name": "Object ID",
						"type": "String"
					},
					{
						"name": "Gallery Number",
						"type": "String"
					},
					{
						"name": "Department",
						"type": "String"
					},
					{
						"name": "AccessionYear",
						"type": "String"
					},
					{
						"name": "Object Name",
						"type": "String"
					},
					{
						"name": "Title",
						"type": "String"
					},
					{
						"name": "Culture",
						"type": "String"
					},
					{
						"name": "Period",
						"type": "String"
					},
					{
						"name": "Dynasty",
						"type": "String"
					},
					{
						"name": "Reign",
						"type": "String"
					},
					{
						"name": "Portfolio",
						"type": "String"
					},
					{
						"name": "Constituent ID",
						"type": "String"
					},
					{
						"name": "Artist Role",
						"type": "String"
					},
					{
						"name": "Artist Prefix",
						"type": "String"
					},
					{
						"name": "Artist Display Name",
						"type": "String"
					},
					{
						"name": "Artist Display Bio",
						"type": "String"
					},
					{
						"name": "Artist Suffix",
						"type": "String"
					},
					{
						"name": "Artist Alpha Sort",
						"type": "String"
					},
					{
						"name": "Artist Nationality",
						"type": "String"
					},
					{
						"name": "Artist Begin Date",
						"type": "String"
					},
					{
						"name": "Artist End Date",
						"type": "String"
					},
					{
						"name": "Artist Gender",
						"type": "String"
					},
					{
						"name": "Artist ULAN URL",
						"type": "String"
					},
					{
						"name": "Artist Wikidata URL",
						"type": "String"
					},
					{
						"name": "Object Date",
						"type": "String"
					},
					{
						"name": "Object Begin Date",
						"type": "String"
					},
					{
						"name": "Object End Date",
						"type": "String"
					},
					{
						"name": "Medium",
						"type": "String"
					},
					{
						"name": "Dimensions",
						"type": "String"
					},
					{
						"name": "Credit Line",
						"type": "String"
					},
					{
						"name": "Geography Type",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "State",
						"type": "String"
					},
					{
						"name": "County",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Region",
						"type": "String"
					},
					{
						"name": "Subregion",
						"type": "String"
					},
					{
						"name": "Locale",
						"type": "String"
					},
					{
						"name": "Locus",
						"type": "String"
					},
					{
						"name": "Excavation",
						"type": "String"
					},
					{
						"name": "River",
						"type": "String"
					},
					{
						"name": "Classification",
						"type": "String"
					},
					{
						"name": "Rights and Reproduction",
						"type": "String"
					},
					{
						"name": "Link Resource",
						"type": "String"
					},
					{
						"name": "Object Wikidata URL",
						"type": "String"
					},
					{
						"name": "Metadata Date",
						"type": "String"
					},
					{
						"name": "Repository",
						"type": "String"
					},
					{
						"name": "Tags",
						"type": "String"
					},
					{
						"name": "Tags AAT URL",
						"type": "String"
					},
					{
						"name": "Tags Wikidata URL",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/BlobStorageRaw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SMK_standardized_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BlobStorageStandardized",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "smk",
						"container": "standardized"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/BlobStorageStandardized')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/all_api_files_json')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BlobStorageRaw",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": "api",
						"container": "raw"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"objectId": {
							"type": "integer"
						},
						"responsibleOrganisation": {
							"type": "string"
						},
						"dimensions": {
							"type": "array"
						},
						"keywords": {
							"type": "array"
						},
						"materials": {
							"type": "array"
						},
						"category": {
							"type": "object",
							"properties": {
								"categoryId": {
									"type": "string"
								},
								"en": {
									"type": "string"
								},
								"fi": {
									"type": "string"
								},
								"sv": {
									"type": "string"
								}
							}
						},
						"classifications": {
							"type": "array"
						},
						"inventoryNumber": {
							"type": "string"
						},
						"people": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"id": {
										"type": "integer"
									},
									"firstName": {
										"type": "string"
									},
									"familyName": {
										"type": "string"
									},
									"birthDate": {
										"type": "string"
									},
									"deathDate": {
										"type": "string"
									},
									"birthPlace": {
										"type": "string"
									},
									"deathPlace": {
										"type": "string"
									},
									"birthYear": {
										"type": "integer"
									},
									"deathYear": {
										"type": "integer"
									},
									"attribution": {
										"type": "null"
									},
									"role": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"fi": {
												"type": "string"
											},
											"sv": {
												"type": "string"
											},
											"en": {
												"type": "string"
											},
											"type": {
												"type": "string"
											}
										}
									},
									"birthPlace2": {
										"type": "null"
									},
									"birthPlace3": {
										"type": "null"
									},
									"deathPlace2": {
										"type": "null"
									},
									"deathPlace3": {
										"type": "null"
									}
								}
							}
						},
						"multimedia": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"id": {
										"type": "integer"
									},
									"license": {
										"type": "string"
									},
									"updated_timestamp": {
										"type": "string"
									},
									"filename_extension": {
										"type": "string"
									},
									"width": {
										"type": "integer"
									},
									"height": {
										"type": "integer"
									},
									"size": {
										"type": "integer"
									},
									"image_version": {
										"type": "integer"
									},
									"isRiaDisplayImage": {
										"type": "boolean"
									},
									"ordinal": {
										"type": "integer"
									},
									"photographer_name": {
										"type": "string"
									},
									"address": {
										"type": "null"
									},
									"filename": {
										"type": "string"
									},
									"jpg": {
										"type": "object",
										"properties": {
											"25": {
												"type": "string"
											},
											"250": {
												"type": "string"
											},
											"500": {
												"type": "string"
											},
											"1000": {
												"type": "string"
											},
											"2000": {
												"type": "string"
											},
											"4000": {
												"type": "string"
											}
										}
									},
									"webp": {
										"type": "object",
										"properties": {
											"25": {
												"type": "string"
											},
											"250": {
												"type": "string"
											},
											"500": {
												"type": "string"
											},
											"1000": {
												"type": "string"
											},
											"2000": {
												"type": "string"
											},
											"4000": {
												"type": "string"
											}
										}
									}
								}
							}
						},
						"owner": {
							"type": "string"
						},
						"exhibitions": {
							"type": "array"
						},
						"children": {
							"type": "array"
						},
						"parents": {
							"type": "array",
							"items": {
								"type": "integer"
							}
						},
						"acquisitionDate": {
							"type": "string"
						},
						"title": {
							"type": "object",
							"properties": {
								"en": {
									"type": "string"
								},
								"fi": {
									"type": "string"
								},
								"sv": {
									"type": "string"
								}
							}
						},
						"acquisitionMethod": {
							"type": "object",
							"properties": {
								"en": {
									"type": "string"
								},
								"fi": {
									"type": "string"
								},
								"sv": {
									"type": "string"
								}
							}
						},
						"acquisitionYear": {
							"type": "integer"
						},
						"yearTo": {
							"type": "integer"
						},
						"yearFrom": {
							"type": "integer"
						},
						"description": {
							"type": "object",
							"properties": {
								"id": {
									"type": "integer"
								},
								"artworkId": {
									"type": "integer"
								},
								"en": {
									"type": "string"
								},
								"fi": {
									"type": "string"
								},
								"sv": {
									"type": "string"
								},
								"type": {
									"type": "string"
								}
							}
						},
						"dateFrom": {
							"type": "string"
						},
						"collection": {
							"type": "object",
							"properties": {
								"fi": {
									"type": "string"
								},
								"en": {
									"type": "string"
								},
								"sv": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/BlobStorageRaw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/all_api_files_raw')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_all_apis",
					"type": "LinkedServiceReference",
					"parameters": {
						"BaseURL": {
							"value": "@dataset().BaseURL",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"RelativeURL": {
						"type": "string"
					},
					"BaseURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@dataset().RelativeURL",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_all_apis')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/all_csv_files_blob_raw')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BlobStorageRaw",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": "open access",
						"container": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/BlobStorageRaw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/all_csv_files_github')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "museums_csv",
					"type": "LinkedServiceReference",
					"parameters": {
						"BaseURL": {
							"value": "@dataset().BaseURL",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"BaseURL": {
						"type": "string"
					},
					"RelativeURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@dataset().RelativeURL",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/museums_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ateneum_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BlobStorageStandardized",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "ateneum",
						"container": "standardized"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/BlobStorageStandardized')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/kiasma_json')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BlobStorageRaw",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "kiasma_ateneum_artworks.json",
						"folderPath": "api",
						"container": "raw"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/BlobStorageRaw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/kiasma_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BlobStorageStandardized",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "kiasma",
						"container": "standardized"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/BlobStorageStandardized')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/met_raw')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BlobStorageRaw",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "met_artworks.csv",
						"folderPath": "open access",
						"container": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/BlobStorageRaw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/mot_json')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BlobStorageRaw",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "mot_artworks.json",
						"folderPath": "api",
						"container": "raw"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"1context": {
							"type": "object",
							"properties": {
								"dct": {
									"type": "string"
								},
								"schema": {
									"type": "string"
								},
								"xsd": {
									"type": "string"
								},
								"rdf": {
									"type": "string"
								},
								"rdfs": {
									"type": "string"
								}
							}
						},
						"1graph": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"1type": {
										"type": "string"
									},
									"1id": {
										"type": "string"
									},
									"schema:identifier": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"1type": {
													"type": "string"
												},
												"schema:name": {
													"type": "string"
												},
												"schema:value": {
													"type": "string"
												}
											}
										}
									},
									"schema:genre": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"1id": {
													"type": "string"
												},
												"skos:preflabel": {
													"type": "object",
													"properties": {
														"1value": {
															"type": "string"
														},
														"1lang": {
															"type": "string"
														}
													}
												}
											}
										}
									},
									"schema:name": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"1value": {
													"type": "string"
												},
												"1lang": {
													"type": "string"
												}
											}
										}
									},
									"schema:creator": {
										"type": "object",
										"properties": {
											"1type": {
												"type": "string"
											},
											"schema:name": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"1value": {
															"type": "string"
														},
														"1lang": {
															"type": "string"
														}
													}
												}
											}
										}
									},
									"schema:dateCreated": {
										"type": "string"
									},
									"schema:material": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"1value": {
													"type": "string"
												},
												"1lang": {
													"type": "string"
												}
											}
										}
									},
									"schema:isPartOf": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"1type": {
													"type": "string"
												},
												"schema:maintainer": {
													"type": "array",
													"items": {
														"type": "object",
														"properties": {
															"1type": {
																"type": "string"
															},
															"schema:name": {
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"1value": {
																			"type": "string"
																		},
																		"1lang": {
																			"type": "string"
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									},
									"dct:provenance": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"1value": {
													"type": "string"
												},
												"1lang": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/BlobStorageRaw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/rawCSVpaths')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BlobStorageRaw",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "github_csv_file_paths.json",
						"container": "misc"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"BaseURL": {
							"type": "string"
						},
						"RelativeURL": {
							"type": "string"
						},
						"FileName": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/BlobStorageRaw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/raw_api_links')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BlobStorageRaw",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "api_links.json",
						"container": "misc"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/BlobStorageRaw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/smk_artists')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BlobStorageRaw",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "smk_artists.json",
						"folderPath": "api",
						"container": "raw"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"offset": {
							"type": "integer"
						},
						"rows": {
							"type": "integer"
						},
						"found": {
							"type": "integer"
						},
						"items": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"created": {
										"type": "string"
									},
									"modified": {
										"type": "string"
									},
									"works": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"birth_date_end": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"birth_date_start": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"death_date_end": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"death_date_start": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"gender": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"name_type": {
										"type": "array",
										"items": {
											"type": "string"
										}
									}
								}
							}
						},
						"facets": {
							"type": "object"
						},
						"facets_ranges": {
							"type": "object"
						},
						"autocomplete": {
							"type": "array"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/BlobStorageRaw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/smk_artworks')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BlobStorageRaw",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "smk_artworks.json",
						"folderPath": "api",
						"container": "raw"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"offset": {
							"type": "integer"
						},
						"rows": {
							"type": "integer"
						},
						"found": {
							"type": "integer"
						},
						"items": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"created": {
										"type": "string"
									},
									"modified": {
										"type": "string"
									},
									"acquisition_date": {
										"type": "string"
									},
									"acquisition_date_precision": {
										"type": "string"
									},
									"dimensions": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"part": {
													"type": "string"
												},
												"type": {
													"type": "string"
												},
												"unit": {
													"type": "string"
												},
												"value": {
													"type": "string"
												}
											}
										}
									},
									"documentation": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"title": {
													"type": "string"
												},
												"author": {
													"type": "string"
												},
												"notes": {
													"type": "string"
												},
												"shelfmark": {
													"type": "string"
												},
												"year_of_publication": {
													"type": "string"
												}
											}
										}
									},
									"object_names": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"name": {
													"type": "string"
												}
											}
										}
									},
									"production": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"creator": {
													"type": "string"
												},
												"creator_forename": {
													"type": "string"
												},
												"creator_surname": {
													"type": "string"
												},
												"creator_date_of_birth": {
													"type": "string"
												},
												"creator_date_of_death": {
													"type": "string"
												},
												"creator_nationality": {
													"type": "string"
												},
												"creator_gender": {
													"type": "string"
												},
												"creator_lref": {
													"type": "string"
												}
											}
										}
									},
									"production_date": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"start": {
													"type": "string"
												},
												"end": {
													"type": "string"
												},
												"period": {
													"type": "string"
												}
											}
										}
									},
									"techniques": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"object_number": {
										"type": "string"
									},
									"object_url": {
										"type": "string"
									},
									"frontend_url": {
										"type": "string"
									},
									"iiif_manifest": {
										"type": "string"
									},
									"enrichment_url": {
										"type": "string"
									},
									"similar_images_url": {
										"type": "string"
									},
									"production_dates_notes": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"public_domain": {
										"type": "boolean"
									},
									"rights": {
										"type": "string"
									},
									"on_display": {
										"type": "boolean"
									},
									"image_mime_type": {
										"type": "string"
									},
									"image_iiif_id": {
										"type": "string"
									},
									"image_iiif_info": {
										"type": "string"
									},
									"image_width": {
										"type": "integer"
									},
									"image_height": {
										"type": "integer"
									},
									"image_size": {
										"type": "integer"
									},
									"image_thumbnail": {
										"type": "string"
									},
									"image_native": {
										"type": "string"
									},
									"image_cropped": {
										"type": "boolean"
									},
									"image_orientation": {
										"type": "string"
									},
									"image_hq": {
										"type": "boolean"
									},
									"has_3d_file": {
										"type": "boolean"
									},
									"has_image": {
										"type": "boolean"
									},
									"colors": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"suggested_bg_color": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"entropy": {
										"type": "number"
									},
									"contrast": {
										"type": "number"
									},
									"saturation": {
										"type": "number"
									},
									"colortemp": {
										"type": "number"
									},
									"brightness": {
										"type": "number"
									},
									"titles": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"title": {
													"type": "string"
												},
												"type": {
													"type": "string"
												},
												"language": {
													"type": "string"
												}
											}
										}
									},
									"artist": {
										"type": "array",
										"items": {
											"type": "string"
										}
									}
								}
							}
						},
						"facets": {
							"type": "object"
						},
						"facets_ranges": {
							"type": "object"
						},
						"autocomplete": {
							"type": "array"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/BlobStorageRaw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureFunction1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureFunction",
				"typeProperties": {
					"functionAppUrl": "[parameters('AzureFunction1_properties_typeProperties_functionAppUrl')]",
					"authentication": "Anonymous",
					"functionKey": {
						"type": "SecureString",
						"value": "[parameters('AzureFunction1_functionKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BlobStorageRaw')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('BlobStorageRaw_properties_typeProperties_serviceEndpoint')]",
					"accountKind": "StorageV2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BlobStorageStandardized')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('BlobStorageStandardized_properties_typeProperties_serviceEndpoint')]",
					"accountKind": "StorageV2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GitHub')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('GitHub_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_KiasmaAPI')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('LS_KiasmaAPI_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_all_apis')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"BaseURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('LS_all_apis_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/museums_csv')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"BaseURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('museums_csv_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/kiasma_raw_to_parquet')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "kiasma_json",
								"type": "DatasetReference"
							},
							"name": "kiasmaRaw"
						},
						{
							"dataset": {
								"referenceName": "kiasma_json",
								"type": "DatasetReference"
							},
							"name": "kiasmaRawDimensions"
						},
						{
							"dataset": {
								"referenceName": "kiasma_json",
								"type": "DatasetReference"
							},
							"name": "kiasmaRawMedium"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ateneum_parquet",
								"type": "DatasetReference"
							},
							"name": "Ateneum"
						},
						{
							"dataset": {
								"referenceName": "kiasma_parquet",
								"type": "DatasetReference"
							},
							"name": "Kiasma"
						}
					],
					"transformations": [
						{
							"name": "selectBasicCols"
						},
						{
							"name": "split1"
						},
						{
							"name": "flattenArtist"
						},
						{
							"name": "selectDimensionsCols"
						},
						{
							"name": "flattenDimensions"
						},
						{
							"name": "addColForPivot"
						},
						{
							"name": "pivotDimesions"
						},
						{
							"name": "addNewCols",
							"description": "Creates an explicit mapping for each drifted column"
						},
						{
							"name": "FilterNewCols"
						},
						{
							"name": "joinDimensions"
						},
						{
							"name": "selectMedium"
						},
						{
							"name": "flattenMedium"
						},
						{
							"name": "addColforPivot2"
						},
						{
							"name": "pivotMedium"
						},
						{
							"name": "AddMediumCol",
							"description": "Creates an explicit mapping for each drifted column"
						},
						{
							"name": "joinMedium"
						},
						{
							"name": "acqusitionRaw"
						},
						{
							"name": "artistName"
						},
						{
							"name": "selectRaw"
						},
						{
							"name": "addMuseumName"
						},
						{
							"name": "selectFinal"
						},
						{
							"name": "addMuseumName2"
						},
						{
							"name": "selectFinal2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          acquisitionDate as string,",
						"          acquisitionMethod as (en as string, fi as string, sv as string),",
						"          acquisitionYear as short,",
						"          category as (categoryId as string, en as string, fi as string, sv as string),",
						"          children as integer[],",
						"          classifications as (en as string, fi as string, sv as string)[],",
						"          collection as (en as string, fi as string, sv as string),",
						"          dateFrom as string,",
						"          datePrefix as (en as string, fi as string, sv as string),",
						"          description as (artworkId as integer, en as string, fi as string, id as integer, sv as string, type as string),",
						"          dimensions as (measureType as (en as string, fi as string, id as integer, sv as string, type as string, updated as string), measurements as double[], sortLnu as short, unit as string)[],",
						"          exhibitions as (endDate as date, id as integer, location as string, startDate as date, title as string)[],",
						"          inventoryNumber as string,",
						"          keywords as (en as string, fi as string, sv as string)[],",
						"          materials as (en as string, fi as string, sv as string)[],",
						"          multimedia as (address as (created as string, family_name as string, first_name as string, id as integer, updated as string), filename as string, filename_extension as string, height as short, id as integer, image_version as boolean, isRiaDisplayImage as boolean, jpg as ({1000} as string, {2000} as string, {25} as string, {250} as string, {4000} as string, {500} as string), license as string, ordinal as integer, photographer_name as string, size as integer, updated_timestamp as string, webp as ({1000} as string, {2000} as string, {25} as string, {250} as string, {4000} as string, {500} as string), width as short)[],",
						"          objectId as integer,",
						"          owner as string,",
						"          parents as integer[],",
						"          people as (attribution as (en as string, fi as string, id as integer, sv as string, type as string, updated as string), birthDate as date, birthPlace as string, birthPlace2 as (en as string, fi as string, id as integer, sv as string, type as string, updated as string), birthPlace3 as (en as string, fi as string, id as integer, sv as string, type as string, updated as string), birthYear as short, deathDate as date, deathPlace as string, deathPlace2 as (en as string, fi as string, id as integer, sv as string, type as string, updated as string), deathPlace3 as (en as string, fi as string, id as integer, sv as string, type as string, updated as string), deathYear as short, familyName as string, firstName as string, id as integer, role as (en as string, fi as string, id as integer, sv as string, type as string))[],",
						"          responsibleOrganisation as string,",
						"          title as (en as string, fi as string, sv as string),",
						"          yearFrom as short,",
						"          yearTo as short",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> kiasmaRaw",
						"source(output(",
						"          acquisitionDate as string,",
						"          acquisitionMethod as (en as string, fi as string, sv as string),",
						"          acquisitionYear as short,",
						"          category as (categoryId as string, en as string, fi as string, sv as string),",
						"          children as integer[],",
						"          classifications as (en as string, fi as string, sv as string)[],",
						"          collection as (en as string, fi as string, sv as string),",
						"          dateFrom as string,",
						"          datePrefix as (en as string, fi as string, sv as string),",
						"          description as (artworkId as integer, en as string, fi as string, id as integer, sv as string, type as string),",
						"          dimensions as (measureType as (en as string, fi as string, id as integer, sv as string, type as string, updated as string), measurements as double[], sortLnu as short, unit as string)[],",
						"          exhibitions as (endDate as date, id as integer, location as string, startDate as date, title as string)[],",
						"          inventoryNumber as string,",
						"          keywords as (en as string, fi as string, sv as string)[],",
						"          materials as (en as string, fi as string, sv as string)[],",
						"          multimedia as (address as (created as string, family_name as string, first_name as string, id as integer, updated as string), filename as string, filename_extension as string, height as short, id as integer, image_version as boolean, isRiaDisplayImage as boolean, jpg as ({1000} as string, {2000} as string, {25} as string, {250} as string, {4000} as string, {500} as string), license as string, ordinal as integer, photographer_name as string, size as integer, updated_timestamp as string, webp as ({1000} as string, {2000} as string, {25} as string, {250} as string, {4000} as string, {500} as string), width as short)[],",
						"          objectId as integer,",
						"          owner as string,",
						"          parents as integer[],",
						"          people as (attribution as (en as string, fi as string, id as integer, sv as string, type as string, updated as string), birthDate as date, birthPlace as string, birthPlace2 as (en as string, fi as string, id as integer, sv as string, type as string, updated as string), birthPlace3 as (en as string, fi as string, id as integer, sv as string, type as string, updated as string), birthYear as short, deathDate as date, deathPlace as string, deathPlace2 as (en as string, fi as string, id as integer, sv as string, type as string, updated as string), deathPlace3 as (en as string, fi as string, id as integer, sv as string, type as string, updated as string), deathYear as short, familyName as string, firstName as string, id as integer, role as (en as string, fi as string, id as integer, sv as string, type as string))[],",
						"          responsibleOrganisation as string,",
						"          title as (en as string, fi as string, sv as string),",
						"          yearFrom as short,",
						"          yearTo as short",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> kiasmaRawDimensions",
						"source(output(",
						"          acquisitionDate as string,",
						"          acquisitionMethod as (en as string, fi as string, sv as string),",
						"          acquisitionYear as short,",
						"          category as (categoryId as string, en as string, fi as string, sv as string),",
						"          children as integer[],",
						"          classifications as (en as string, fi as string, sv as string)[],",
						"          collection as (en as string, fi as string, sv as string),",
						"          dateFrom as string,",
						"          datePrefix as (en as string, fi as string, sv as string),",
						"          description as (artworkId as integer, en as string, fi as string, id as integer, sv as string, type as string),",
						"          dimensions as (measureType as (en as string, fi as string, id as integer, sv as string, type as string, updated as string), measurements as double[], sortLnu as short, unit as string)[],",
						"          exhibitions as (endDate as date, id as integer, location as string, startDate as date, title as string)[],",
						"          inventoryNumber as string,",
						"          keywords as (en as string, fi as string, sv as string)[],",
						"          materials as (en as string, fi as string, sv as string)[],",
						"          multimedia as (address as (created as string, family_name as string, first_name as string, id as integer, updated as string), filename as string, filename_extension as string, height as short, id as integer, image_version as boolean, isRiaDisplayImage as boolean, jpg as ({1000} as string, {2000} as string, {25} as string, {250} as string, {4000} as string, {500} as string), license as string, ordinal as integer, photographer_name as string, size as integer, updated_timestamp as string, webp as ({1000} as string, {2000} as string, {25} as string, {250} as string, {4000} as string, {500} as string), width as short)[],",
						"          objectId as integer,",
						"          owner as string,",
						"          parents as integer[],",
						"          people as (attribution as (en as string, fi as string, id as integer, sv as string, type as string, updated as string), birthDate as date, birthPlace as string, birthPlace2 as (en as string, fi as string, id as integer, sv as string, type as string, updated as string), birthPlace3 as (en as string, fi as string, id as integer, sv as string, type as string, updated as string), birthYear as short, deathDate as date, deathPlace as string, deathPlace2 as (en as string, fi as string, id as integer, sv as string, type as string, updated as string), deathPlace3 as (en as string, fi as string, id as integer, sv as string, type as string, updated as string), deathYear as short, familyName as string, firstName as string, id as integer, role as (en as string, fi as string, id as integer, sv as string, type as string))[],",
						"          responsibleOrganisation as string,",
						"          title as (en as string, fi as string, sv as string),",
						"          yearFrom as short,",
						"          yearTo as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> kiasmaRawMedium",
						"kiasmaRaw select(mapColumn(",
						"          acquisitionDate,",
						"          acquisitionMethod,",
						"          acquisitionYear,",
						"          dateFrom,",
						"          inventoryNumber,",
						"          objectId,",
						"          owner,",
						"          people,",
						"          responsibleOrganisation,",
						"          title,",
						"          yearFrom,",
						"          yearTo",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectBasicCols",
						"joinMedium split(responsibleOrganisation=='Kansallisgalleria / Ateneumin taidemuseo',",
						"     responsibleOrganisation=='Kansallisgalleria / Nykytaiteen museo Kiasma',",
						"     disjoint: false) ~> split1@(ateneum, kiasma, rest)",
						"acqusitionRaw foldDown(unroll(people),",
						"     mapColumn(",
						"          objectId,",
						"          title = title.fi,",
						"          inventoryNumber,",
						"          acquisition_method = acquisitionMethod.en,",
						"          acquisition_raw,",
						"          production_raw,",
						"          responsibleOrganisation,",
						"          artist_id = people.id,",
						"          familyName = people.familyName,",
						"          firstName = people.firstName,",
						"          birthDate = people.birthDate,",
						"          birthYear = people.birthYear,",
						"          deathDate = people.deathDate,",
						"          deathYear = people.deathYear",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenArtist",
						"kiasmaRawDimensions select(mapColumn(",
						"          dimensions,",
						"          objectId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectDimensionsCols",
						"selectDimensionsCols foldDown(unrollMultiple(dimensions,dimensions.measurements),",
						"     mapColumn(",
						"          objectId,",
						"          dimension_unit = dimensions.unit,",
						"          measurement_value = dimensions.measurements",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenDimensions",
						"flattenDimensions window(over(objectId),",
						"     asc(measurement_value, true),",
						"     measurement_n = rowNumber()) ~> addColForPivot",
						"addColForPivot pivot(groupBy(objectId,",
						"          dimension_unit),",
						"     pivotBy(measurement_n),",
						"     measurement_value = first(measurement_value),",
						"     columnNaming: '$N$V',",
						"     lateral: false) ~> pivotDimesions",
						"pivotDimesions derive(measurement_value1 = toDouble(byName('measurement_value1')),",
						"          measurement_value2 = toDouble(byName('measurement_value2')),",
						"          measurement_value3 = toDouble(byName('measurement_value3')),",
						"          measurement_value4 = toDouble(byName('measurement_value4'))) ~> addNewCols",
						"addNewCols select(mapColumn(",
						"          objectId,",
						"          dimension_unit,",
						"          measurement_value1,",
						"          measurement_value2,",
						"          measurement_value3,",
						"          measurement_value4",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FilterNewCols",
						"selectRaw, FilterNewCols join(selectRaw@objectId == FilterNewCols@objectId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDimensions",
						"kiasmaRawMedium select(mapColumn(",
						"          materials,",
						"          objectId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMedium",
						"selectMedium foldDown(unroll(materials),",
						"     mapColumn(",
						"          objectId,",
						"          medium = materials.en",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenMedium",
						"flattenMedium window(over(objectId),",
						"     asc(medium, true),",
						"     medium_n = rowNumber()) ~> addColforPivot2",
						"addColforPivot2 pivot(groupBy(objectId),",
						"     pivotBy(medium_n),",
						"     medium = first(medium),",
						"     columnNaming: '$N$V',",
						"     lateral: false) ~> pivotMedium",
						"pivotMedium derive(medium1 = toString(byName('medium1')),",
						"          medium2 = toString(byName('medium2')),",
						"          medium3 = toString(byName('medium3')),",
						"          medium4 = toString(byName('medium4')),",
						"          medium5 = toString(byName('medium5')),",
						"          medium6 = toString(byName('medium6'))) ~> AddMediumCol",
						"joinDimensions, AddMediumCol join(selectRaw@objectId == pivotMedium@objectId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMedium",
						"selectBasicCols derive(acquisition_raw = iif(isNull(acquisitionDate), toString(acquisitionYear), acquisitionDate),",
						"          production_raw = coalesce(toString(yearTo), toString(yearFrom), dateFrom)) ~> acqusitionRaw",
						"flattenArtist derive(Artist_name = iif(isNull(familyName + ' ' + firstName), coalesce(familyName, firstName), familyName + ' ' + firstName),",
						"          artist_birth_raw = coalesce(birthDate, toDate(toString(birthYear) + '-01-01')),",
						"          artist_death_raw = coalesce(deathDate, toDate(toString(deathYear) + '-01-01'))) ~> artistName",
						"artistName select(mapColumn(",
						"          objectId,",
						"          title,",
						"          inventoryNumber,",
						"          production_raw,",
						"          acquisition_method,",
						"          acquisition_raw,",
						"          responsibleOrganisation,",
						"          artist_id,",
						"          Artist_name,",
						"          artist_birth_raw,",
						"          artist_death_raw",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectRaw",
						"split1@ateneum derive(Museum_name = \"Ateneum\") ~> addMuseumName",
						"addMuseumName select(mapColumn(",
						"          object_id = split1@ateneum@objectId,",
						"          title,",
						"          inventoryNumber,",
						"          production_raw,",
						"          acquisition_raw,",
						"          acquisition_method,",
						"          artist_id,",
						"          Artist_name,",
						"          artist_birth_raw,",
						"          artist_death_raw,",
						"          dimension_unit,",
						"          measurement_value1,",
						"          measurement_value2,",
						"          measurement_value3,",
						"          measurement_value4,",
						"          medium1,",
						"          medium2,",
						"          medium3,",
						"          medium4,",
						"          medium5,",
						"          Museum_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectFinal",
						"split1@kiasma derive(Museum_name = \"Kiasma\") ~> addMuseumName2",
						"addMuseumName2 select(mapColumn(",
						"          object_id = split1@kiasma@objectId,",
						"          title,",
						"          inventoryNumber,",
						"          production_raw,",
						"          acquisition_raw,",
						"          acquisition_method,",
						"          artist_id,",
						"          Artist_name,",
						"          artist_birth_raw,",
						"          artist_death_raw,",
						"          dimension_unit,",
						"          measurement_value1,",
						"          measurement_value2,",
						"          measurement_value3,",
						"          measurement_value4,",
						"          medium1,",
						"          medium2,",
						"          medium3,",
						"          medium4,",
						"          medium5,",
						"          Museum_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectFinal2",
						"selectFinal sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Ateneum",
						"selectFinal2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Kiasma"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/kiasma_json')]",
				"[concat(variables('factoryId'), '/datasets/ateneum_parquet')]",
				"[concat(variables('factoryId'), '/datasets/kiasma_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/met_raw_to_parquet')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "met_raw",
								"type": "DatasetReference"
							},
							"name": "metRaw"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "met_parquet",
								"type": "DatasetReference"
							},
							"name": "MET"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "productionRaw"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Object Number} as string,",
						"          {Is Highlight} as string,",
						"          {Is Timeline Work} as string,",
						"          {Is Public Domain} as string,",
						"          {Object ID} as string,",
						"          {Gallery Number} as string,",
						"          Department as string,",
						"          AccessionYear as short,",
						"          {Object Name} as string,",
						"          Title as string,",
						"          Culture as string,",
						"          Period as string,",
						"          Dynasty as string,",
						"          Reign as string,",
						"          Portfolio as string,",
						"          {Constituent ID} as string,",
						"          {Artist Role} as string,",
						"          {Artist Prefix} as string,",
						"          {Artist Display Name} as string,",
						"          {Artist Display Bio} as string,",
						"          {Artist Suffix} as string,",
						"          {Artist Alpha Sort} as string,",
						"          {Artist Nationality} as string,",
						"          {Artist Begin Date} as string,",
						"          {Artist End Date} as string,",
						"          {Artist Gender} as string,",
						"          {Artist ULAN URL} as string,",
						"          {Artist Wikidata URL} as string,",
						"          {Object Date} as string,",
						"          {Object Begin Date} as short,",
						"          {Object End Date} as short,",
						"          Medium as string,",
						"          Dimensions as string,",
						"          {Credit Line} as string,",
						"          {Geography Type} as string,",
						"          City as string,",
						"          State as string,",
						"          County as string,",
						"          Country as string,",
						"          Region as string,",
						"          Subregion as string,",
						"          Locale as string,",
						"          Locus as string,",
						"          Excavation as string,",
						"          River as string,",
						"          Classification as string,",
						"          {Rights and Reproduction} as string,",
						"          {Link Resource} as string,",
						"          {Object Wikidata URL} as string,",
						"          {Metadata Date} as string,",
						"          Repository as string,",
						"          Tags as string,",
						"          {Tags AAT URL} as string,",
						"          {Tags Wikidata URL} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> metRaw",
						"metRaw select(mapColumn(",
						"          object_id = {Object ID},",
						"          title = Title,",
						"          inventoryNumber = {Object Number},",
						"          acquisition_raw = AccessionYear,",
						"          artist_id = {Constituent ID},",
						"          Artist_name = {Artist Alpha Sort},",
						"          Artist_country = {Artist Nationality},",
						"          artist_birth_raw = {Artist Begin Date},",
						"          artist_death_raw = {Artist End Date},",
						"          Artist_gender = {Artist Gender},",
						"          {Object Date},",
						"          {Object Begin Date},",
						"          {Object End Date},",
						"          Dimensions,",
						"          acquisition_method = {Credit Line},",
						"          medium1 = {Object Name}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(production_raw = coalesce({Object End Date}, {Object Begin Date}),",
						"          dim_europe = split(split(Dimensions, '(')[2], ')')[1],",
						"          Museum = \"MET\",",
						"          object_id = toInteger(object_id)) ~> productionRaw",
						"productionRaw derive(dimension_unit = regexReplace(replace(dim_europe, 'x', ' '), '[^A-Za-z]+', ' '),",
						"          measurement_value1 = replace(replace(dim_europe, 'x', ''), 'cm', '')",
						"",
						") ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          object_id,",
						"          title,",
						"          inventoryNumber,",
						"          production_raw,",
						"          acquisition_raw,",
						"          acquisition_method,",
						"          artist_id,",
						"          Artist_name,",
						"          artist_birth_raw,",
						"          artist_death_raw,",
						"          Artist_gender,",
						"          Artist_country,",
						"          dimension_unit,",
						"          measurement_value1,",
						"          medium1,",
						"          Museum",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> MET"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/met_raw')]",
				"[concat(variables('factoryId'), '/datasets/met_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/smk_raw_to_parquet')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "smk_artists",
								"type": "DatasetReference"
							},
							"name": "artists"
						},
						{
							"dataset": {
								"referenceName": "smk_artworks",
								"type": "DatasetReference"
							},
							"name": "artworks"
						},
						{
							"dataset": {
								"referenceName": "smk_artworks",
								"type": "DatasetReference"
							},
							"name": "artworksDimensions"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SMK_standardized_parquet",
								"type": "DatasetReference"
							},
							"name": "SMK"
						}
					],
					"transformations": [
						{
							"name": "flattenArtistData"
						},
						{
							"name": "addGenderId"
						},
						{
							"name": "pivotGenderLang"
						},
						{
							"name": "artistsCol"
						},
						{
							"name": "addGenderCol",
							"description": "Creates an explicit mapping for each drifted column"
						},
						{
							"name": "flatten3"
						},
						{
							"name": "flattenDimensions"
						},
						{
							"name": "dimensionsCol"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "typeCast",
							"description": "Autogenerated by data preview actions"
						},
						{
							"name": "join1"
						},
						{
							"name": "join2"
						},
						{
							"name": "objectID"
						},
						{
							"name": "dimensionsCol2",
							"description": "Creates an explicit mapping for each drifted column"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          offset as integer,",
						"          rows as integer,",
						"          found as integer,",
						"          items as (id as string, created as string, modified as string, works as string[], birth_date_end as string[], birth_date_start as string[], death_date_end as string[], death_date_start as string[], gender as string[], name_type as string[])[],",
						"          facets as ({} as string),",
						"          facets_ranges as ({} as string),",
						"          autocomplete as string[]",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> artists",
						"source(output(",
						"          offset as integer,",
						"          rows as integer,",
						"          found as integer,",
						"          items as (id as string, created as string, modified as string, acquisition_date as string, acquisition_date_precision as string, dimensions as (part as string, type as string, unit as string, value as string)[], documentation as (title as string, author as string, notes as string, shelfmark as string, year_of_publication as string)[], object_names as (name as string)[], production as (creator as string, creator_forename as string, creator_surname as string, creator_date_of_birth as string, creator_date_of_death as string, creator_nationality as string, creator_gender as string, creator_lref as string)[], production_date as (start as string, end as string, period as string)[], techniques as string[], object_number as string, object_url as string, frontend_url as string, iiif_manifest as string, enrichment_url as string, similar_images_url as string, production_dates_notes as string[], public_domain as boolean, rights as string, on_display as boolean, image_mime_type as string, image_iiif_id as string, image_iiif_info as string, image_width as integer, image_height as integer, image_size as integer, image_thumbnail as string, image_native as string, image_cropped as boolean, image_orientation as string, image_hq as boolean, has_3d_file as boolean, has_image as boolean, colors as string[], suggested_bg_color as string[], entropy as double, contrast as double, saturation as double, colortemp as double, brightness as double, titles as (title as string, type as string, language as string)[], artist as string[])[],",
						"          facets as ({} as string),",
						"          facets_ranges as ({} as string),",
						"          autocomplete as string[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> artworks",
						"source(output(",
						"          offset as integer,",
						"          rows as integer,",
						"          found as integer,",
						"          items as (id as string, created as string, modified as string, acquisition_date as string, acquisition_date_precision as string, dimensions as (part as string, type as string, unit as string, value as string)[], documentation as (title as string, author as string, notes as string, shelfmark as string, year_of_publication as string)[], object_names as (name as string)[], production as (creator as string, creator_forename as string, creator_surname as string, creator_date_of_birth as string, creator_date_of_death as string, creator_nationality as string, creator_gender as string, creator_lref as string)[], production_date as (start as string, end as string, period as string)[], techniques as string[], object_number as string, object_url as string, frontend_url as string, iiif_manifest as string, enrichment_url as string, similar_images_url as string, production_dates_notes as string[], public_domain as boolean, rights as string, on_display as boolean, image_mime_type as string, image_iiif_id as string, image_iiif_info as string, image_width as integer, image_height as integer, image_size as integer, image_thumbnail as string, image_native as string, image_cropped as boolean, image_orientation as string, image_hq as boolean, has_3d_file as boolean, has_image as boolean, colors as string[], suggested_bg_color as string[], entropy as double, contrast as double, saturation as double, colortemp as double, brightness as double, titles as (title as string, type as string, language as string)[], artist as string[])[],",
						"          facets as ({} as string),",
						"          facets_ranges as ({} as string),",
						"          autocomplete as string[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> artworksDimensions",
						"artists foldDown(unrollMultiple(items,items.birth_date_end,items.birth_date_start,items.death_date_end,items.death_date_start,items.gender),",
						"     mapColumn(",
						"          artist_id = items.id,",
						"          birth_date_end = items.birth_date_end,",
						"          birth_date_start = items.birth_date_start,",
						"          death_date_end = items.death_date_end,",
						"          death_date_start = items.death_date_start,",
						"          gender = items.gender",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenArtistData",
						"flattenArtistData window(over(artist_id),",
						"     asc(gender, true),",
						"     gender_lang = rowNumber()) ~> addGenderId",
						"addGenderId pivot(groupBy(artist_id,",
						"          birth_date_end,",
						"          birth_date_start,",
						"          death_date_end,",
						"          death_date_start),",
						"     pivotBy(gender_lang),",
						"     {} = first(gender),",
						"     columnNaming: '$N$V',",
						"     lateral: false) ~> pivotGenderLang",
						"addGenderCol select(mapColumn(",
						"          artist_id,",
						"          gender = {5},",
						"          artist_birth_raw,",
						"          artist_death_raw",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> artistsCol",
						"pivotGenderLang derive({1} = toString(byName('1')),",
						"          {2} = toString(byName('2')),",
						"          {3} = toString(byName('3')),",
						"          {4} = toString(byName('4')),",
						"          {5} = toString(byName('5')),",
						"          {6} = toString(byName('6')),",
						"          {7} = toString(byName('7')),",
						"          {8} = toString(byName('8')),",
						"          {9} = toString(byName('9')),",
						"          artist_birth_raw = toDate(coalesce(birth_date_start, birth_date_end), 'yyyy-MM-dd'),",
						"          artist_death_raw = toDate(coalesce(death_date_start, death_date_end), 'yyyy-MM-dd')) ~> addGenderCol",
						"artworks foldDown(unrollMultiple(items,items.production,items.production_date,items.object_names),",
						"     mapColumn(",
						"          id = items.id,",
						"          acquisition_date = items.acquisition_date,",
						"          acquisition_date_precision = items.acquisition_date_precision,",
						"          artist_id = items.production.creator_lref,",
						"          production_date_start = items.production_date.start,",
						"          production_date_end = items.production_date.end,",
						"          techniques = items.techniques,",
						"          inventoryNumber = items.object_number,",
						"          titles = items.titles.title,",
						"          artist_name = items.production.creator",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"artworksDimensions foldDown(unrollMultiple(items,items.dimensions),",
						"     mapColumn(",
						"          id = items.id,",
						"          dimension = items.dimensions.type,",
						"          dimension_unit = items.dimensions.unit,",
						"          measurement_value = items.dimensions.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenDimensions",
						"flattenDimensions pivot(groupBy(id,",
						"          dimension_unit),",
						"     pivotBy(dimension),",
						"     {} = first(measurement_value),",
						"     columnNaming: '$N$V',",
						"     lateral: false) ~> dimensionsCol",
						"flatten3 aggregate(groupBy(id,",
						"          acquisition_date,",
						"          acquisition_date_precision,",
						"          production_date_start,",
						"          production_date_end,",
						"          inventoryNumber),",
						"     artwork_id = first(id),",
						"          first_artist_id = first(artist_id),",
						"          first_title = first(titles),",
						"          medium_1 = first(techniques),",
						"          Artist_name = first(artist_name)) ~> aggregate1",
						"aggregate1 derive(first_title = toString(first_title),",
						"          medium_1 = toString(medium_1)) ~> typeCast",
						"typeCast, artistsCol join(first_artist_id == artist_id,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1, dimensionsCol2 join(artwork_id == dimensionsCol@id,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2 derive(object_id = toInteger(split(artwork_id, '_')[1]),",
						"          title = replace(replace(replace(first_title, '[', ''), ']', ''), '\"', ''),",
						"          production_raw = coalesce(production_date_start,production_date_end),",
						"          acquisition_raw = coalesce(acquisition_date,acquisition_date_precision),",
						"          acquisition_method = \"Unknown\",",
						"          artist_id = toInteger(split(first_artist_id, '_')[1]),",
						"          measurement_value1 = height,",
						"          measurement_value2 = width,",
						"          medium1 = replace(replace(replace(medium_1, '[', ''), ']', ''), '\"', ''),",
						"          Museum_name = \"SMK\") ~> objectID",
						"dimensionsCol derive(height = toString(byName('height')),",
						"          width = toString(byName('width'))) ~> dimensionsCol2",
						"objectID select(mapColumn(",
						"          object_id,",
						"          title,",
						"          inventoryNumber,",
						"          production_raw,",
						"          acquisition_raw,",
						"          acquisition_method,",
						"          artist_id,",
						"          Artist_name,",
						"          artist_birth_raw,",
						"          artist_death_raw,",
						"          Artist_gender = gender,",
						"          dimension_unit,",
						"          measurement_value1,",
						"          measurement_value2,",
						"          medium1,",
						"          Museum_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SMK"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/smk_artists')]",
				"[concat(variables('factoryId'), '/datasets/smk_artworks')]",
				"[concat(variables('factoryId'), '/datasets/SMK_standardized_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/met_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BlobStorageStandardized",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "met",
						"container": "standardized"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/BlobStorageStandardized')]"
			]
		}
	]
}