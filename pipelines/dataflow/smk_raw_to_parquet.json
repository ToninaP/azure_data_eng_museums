{
	"name": "smk_raw_to_parquet",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "smk_artists",
						"type": "DatasetReference"
					},
					"name": "artists"
				},
				{
					"dataset": {
						"referenceName": "smk_artworks",
						"type": "DatasetReference"
					},
					"name": "artworks"
				},
				{
					"dataset": {
						"referenceName": "smk_artworks",
						"type": "DatasetReference"
					},
					"name": "artworksDimensions"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SMK_standardized_parquet",
						"type": "DatasetReference"
					},
					"name": "SMK"
				}
			],
			"transformations": [
				{
					"name": "flattenArtistData"
				},
				{
					"name": "addGenderId"
				},
				{
					"name": "pivotGenderLang"
				},
				{
					"name": "artistsCol"
				},
				{
					"name": "addGenderCol",
					"description": "Creates an explicit mapping for each drifted column"
				},
				{
					"name": "flatten3"
				},
				{
					"name": "flattenDimensions"
				},
				{
					"name": "dimensionsCol"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "typeCast",
					"description": "Autogenerated by data preview actions"
				},
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "objectID"
				},
				{
					"name": "dimensionsCol2",
					"description": "Creates an explicit mapping for each drifted column"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          offset as integer,",
				"          rows as integer,",
				"          found as integer,",
				"          items as (id as string, created as string, modified as string, works as string[], birth_date_end as string[], birth_date_start as string[], death_date_end as string[], death_date_start as string[], gender as string[], name_type as string[])[],",
				"          facets as ({} as string),",
				"          facets_ranges as ({} as string),",
				"          autocomplete as string[]",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> artists",
				"source(output(",
				"          acquisition_date as timestamp,",
				"          acquisition_date_precision as string,",
				"          alternative_images as (cropped as boolean[], height as short, iiif_id as string, iiif_info as string, mime_type as string, native as string, orientation as string, size as double, thumbnail as string, width as short)[],",
				"          artist as string[],",
				"          backside_protection as string,",
				"          brightness as double,",
				"          collection as string[],",
				"          colors as string[],",
				"          colortemp as double,",
				"          content_description as string[],",
				"          content_person as string[],",
				"          content_person_full as (forename as string, full_name as string, gender as string, name as string, nationality as string, surname as string)[],",
				"          content_subject as string[],",
				"          contrast as double,",
				"          copy_number as short[],",
				"          created as timestamp,",
				"          credit_line as string[],",
				"          current_location_name as string,",
				"          dimensions as (notes as string, part as string, precision as string, type as string, unit as string, value as short)[],",
				"          distinguishing_features as string[],",
				"          documentation as (author as string, notes as string, page_reference as string, shelfmark as string, title as string, year_of_publication as string)[],",
				"          edition as string[],",
				"          enrichment_url as string,",
				"          entropy as double,",
				"          exhibitions as (date_end as string, date_start as string, exhibition as string, venue as string)[],",
				"          files_3D as (file_size as string, mime_type as string, url as string)[],",
				"          frontend_url as string,",
				"          geo_location as string,",
				"          has_3d_file as boolean,",
				"          has_image as boolean,",
				"          has_text as boolean,",
				"          id as string,",
				"          iiif_manifest as string,",
				"          image_cropped as boolean,",
				"          image_height as short,",
				"          image_hq as boolean,",
				"          image_iiif_id as string,",
				"          image_iiif_info as string,",
				"          image_mime_type as string,",
				"          image_native as string,",
				"          image_orientation as string,",
				"          image_size as integer,",
				"          image_thumbnail as string,",
				"          image_type as string,",
				"          image_width as short,",
				"          inscriptions as (content as string, date as string, description as string, interpretation as string, language as string, notes as string, translation as string, type as string)[],",
				"          labels as (date as string, source as string, text as string, type as string)[],",
				"          literary_reference as string[],",
				"          materials as string[],",
				"          media_3d as string[],",
				"          media_audio as string[],",
				"          media_links as string[],",
				"          media_video as string[],",
				"          microclimate_frame as string,",
				"          modified as timestamp,",
				"          notes as string[],",
				"          number_of_parts as short,",
				"          object_history_note as string[],",
				"          object_names as (classification_notes as string, name as string)[],",
				"          object_number as string,",
				"          object_url as string,",
				"          on_display as boolean,",
				"          original as (current_owner as string[], distinguishing_features as string[], notes as string[], object_history_note as string[], object_number as string, production_date_notes as string[], technique as string[], titles as string[])[],",
				"          part_of as string[],",
				"          parts as string[],",
				"          print_state as string[],",
				"          production as (creator as string, creator_date_of_birth as string, creator_date_of_death as string, creator_forename as string, creator_gender as string, creator_history as string, creator_lref as string, creator_nationality as string, creator_qualifier as string, creator_role as string, creator_surname as string, notes as string, place_name as string, place_number as string, term_code as string)[],",
				"          production_date as (end as string, end_prec as string, period as string, start as string, start_prec as string)[],",
				"          production_dates_notes as string[],",
				"          public_domain as boolean,",
				"          related_objects as (notes as string, reference as string, title as string)[],",
				"          responsible_department as string,",
				"          rights as string,",
				"          saturation as double,",
				"          shape as string[],",
				"          similar_images_url as string,",
				"          suggested_bg_color as string[],",
				"          techniques as string[],",
				"          titles as (language as string, notes as string, title as string, translation as string, type as string)[]",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> artworks",
				"source(output(",
				"          acquisition_date as timestamp,",
				"          acquisition_date_precision as string,",
				"          alternative_images as (cropped as boolean[], height as short, iiif_id as string, iiif_info as string, mime_type as string, native as string, orientation as string, size as double, thumbnail as string, width as short)[],",
				"          artist as string[],",
				"          backside_protection as string,",
				"          brightness as double,",
				"          collection as string[],",
				"          colors as string[],",
				"          colortemp as double,",
				"          content_description as string[],",
				"          content_person as string[],",
				"          content_person_full as (forename as string, full_name as string, gender as string, name as string, nationality as string, surname as string)[],",
				"          content_subject as string[],",
				"          contrast as double,",
				"          copy_number as short[],",
				"          created as timestamp,",
				"          credit_line as string[],",
				"          current_location_name as string,",
				"          dimensions as (notes as string, part as string, precision as string, type as string, unit as string, value as short)[],",
				"          distinguishing_features as string[],",
				"          documentation as (author as string, notes as string, page_reference as string, shelfmark as string, title as string, year_of_publication as string)[],",
				"          edition as string[],",
				"          enrichment_url as string,",
				"          entropy as double,",
				"          exhibitions as (date_end as string, date_start as string, exhibition as string, venue as string)[],",
				"          files_3D as (file_size as string, mime_type as string, url as string)[],",
				"          frontend_url as string,",
				"          geo_location as string,",
				"          has_3d_file as boolean,",
				"          has_image as boolean,",
				"          has_text as boolean,",
				"          id as string,",
				"          iiif_manifest as string,",
				"          image_cropped as boolean,",
				"          image_height as short,",
				"          image_hq as boolean,",
				"          image_iiif_id as string,",
				"          image_iiif_info as string,",
				"          image_mime_type as string,",
				"          image_native as string,",
				"          image_orientation as string,",
				"          image_size as integer,",
				"          image_thumbnail as string,",
				"          image_type as string,",
				"          image_width as short,",
				"          inscriptions as (content as string, date as string, description as string, interpretation as string, language as string, notes as string, translation as string, type as string)[],",
				"          labels as (date as string, source as string, text as string, type as string)[],",
				"          literary_reference as string[],",
				"          materials as string[],",
				"          media_3d as string[],",
				"          media_audio as string[],",
				"          media_links as string[],",
				"          media_video as string[],",
				"          microclimate_frame as string,",
				"          modified as timestamp,",
				"          notes as string[],",
				"          number_of_parts as short,",
				"          object_history_note as string[],",
				"          object_names as (classification_notes as string, name as string)[],",
				"          object_number as string,",
				"          object_url as string,",
				"          on_display as boolean,",
				"          original as (current_owner as string[], distinguishing_features as string[], notes as string[], object_history_note as string[], object_number as string, production_date_notes as string[], technique as string[], titles as string[])[],",
				"          part_of as string[],",
				"          parts as string[],",
				"          print_state as string[],",
				"          production as (creator as string, creator_date_of_birth as string, creator_date_of_death as string, creator_forename as string, creator_gender as string, creator_history as string, creator_lref as string, creator_nationality as string, creator_qualifier as string, creator_role as string, creator_surname as string, notes as string, place_name as string, place_number as string, term_code as string)[],",
				"          production_date as (end as string, end_prec as string, period as string, start as string, start_prec as string)[],",
				"          production_dates_notes as string[],",
				"          public_domain as boolean,",
				"          related_objects as (notes as string, reference as string, title as string)[],",
				"          responsible_department as string,",
				"          rights as string,",
				"          saturation as double,",
				"          shape as string[],",
				"          similar_images_url as string,",
				"          suggested_bg_color as string[],",
				"          techniques as string[],",
				"          titles as (language as string, notes as string, title as string, translation as string, type as string)[]",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> artworksDimensions",
				"artists foldDown(unrollMultiple(items,items.birth_date_end,items.birth_date_start,items.death_date_end,items.death_date_start,items.gender),",
				"     mapColumn(",
				"          artist_id = items.id,",
				"          birth_date_end = items.birth_date_end,",
				"          birth_date_start = items.birth_date_start,",
				"          death_date_end = items.death_date_end,",
				"          death_date_start = items.death_date_start,",
				"          gender = items.gender",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flattenArtistData",
				"flattenArtistData window(over(artist_id),",
				"     asc(gender, true),",
				"     gender_lang = rowNumber()) ~> addGenderId",
				"addGenderId pivot(groupBy(artist_id,",
				"          birth_date_end,",
				"          birth_date_start,",
				"          death_date_end,",
				"          death_date_start),",
				"     pivotBy(gender_lang),",
				"     {} = first(gender),",
				"     columnNaming: '$N$V',",
				"     lateral: false) ~> pivotGenderLang",
				"addGenderCol select(mapColumn(",
				"          artist_id,",
				"          gender = {5},",
				"          artist_birth_raw,",
				"          artist_death_raw",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> artistsCol",
				"pivotGenderLang derive({1} = toString(byName('1')),",
				"          {2} = toString(byName('2')),",
				"          {3} = toString(byName('3')),",
				"          {4} = toString(byName('4')),",
				"          {5} = toString(byName('5')),",
				"          {6} = toString(byName('6')),",
				"          {7} = toString(byName('7')),",
				"          {8} = toString(byName('8')),",
				"          {9} = toString(byName('9')),",
				"          artist_birth_raw = toDate(coalesce(birth_date_start, birth_date_end), 'yyyy-MM-dd'),",
				"          artist_death_raw = toDate(coalesce(death_date_start, death_date_end), 'yyyy-MM-dd')) ~> addGenderCol",
				"artworks foldDown(unrollMultiple(artist,content_person_full,credit_line),",
				"     mapColumn(",
				"          id,",
				"          titles = titles.title,",
				"          object_number,",
				"          production_raw = production_date.end,",
				"          acquisition_raw = acquisition_date_precision,",
				"          artist_name = production.creator,",
				"          credit_line,",
				"          dim_unit = dimensions.unit,",
				"          dim_value = dimensions.value,",
				"          materials,",
				"          medium_classification = object_names.name,",
				"          artist_birth = production.creator_date_of_birth,",
				"          artist_death = production.creator_date_of_death,",
				"          artist_gender = production.creator_gender,",
				"          artist_country = production.creator_nationality",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten3",
				"artworksDimensions foldDown(unrollMultiple(dimensions,),",
				"     mapColumn(",
				"          id,",
				"          dimension = dimensions.type,",
				"          dimension_unit = dimensions.unit",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flattenDimensions",
				"flattenDimensions pivot(groupBy(id,",
				"          dimension_unit),",
				"     pivotBy(dimension),",
				"     {} = first(measurement_value),",
				"     columnNaming: '$N$V',",
				"     lateral: false) ~> dimensionsCol",
				"flatten3 aggregate(groupBy(id,",
				"          acquisition_date,",
				"          acquisition_raw,",
				"          production_date_start,",
				"          production_date_end,",
				"          inventoryNumber),",
				"     artwork_id = first(id),",
				"          first_artist_id = first(artist_id),",
				"          first_title = first(titles),",
				"          medium_1 = first(techniques),",
				"          Artist_name = first(artist_name)) ~> aggregate1",
				"aggregate1 derive(first_title = toString(first_title),",
				"          medium_1 = toString(medium_1)) ~> typeCast",
				"typeCast, artistsCol join(first_artist_id == artist_id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1, dimensionsCol2 join(artwork_id == dimensionsCol@id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 derive(object_id = toInteger(split(artwork_id, '_')[1]),",
				"          title = replace(replace(replace(first_title, '[', ''), ']', ''), '\"', ''),",
				"          production_raw = coalesce(production_date_start,production_date_end),",
				"          acquisition_raw = coalesce(acquisition_date,acquisition_raw),",
				"          acquisition_method = \"Unknown\",",
				"          artist_id = toInteger(split(first_artist_id, '_')[1]),",
				"          measurement_value1 = height,",
				"          measurement_value2 = width,",
				"          medium_classification_raw = replace(replace(replace(medium_1, '[', ''), ']', ''), '\"', ''),",
				"          medium1 = replace(replace(replace(medium_1, '[', ''), ']', ''), '\"', ''),",
				"          museum_name = \"SMK\",",
				"          artist_gender = \"unknown\",",
				"          artist_county = \"unknown\",",
				"          artist_group = \"unknown\",",
				"          museum_id = 3) ~> objectID",
				"dimensionsCol derive(height = toString(byName('height')),",
				"          width = toString(byName('width'))) ~> dimensionsCol2",
				"objectID select(mapColumn(",
				"          object_id,",
				"          title,",
				"          inventory_n = inventoryNumber,",
				"          production_raw,",
				"          acquisition_raw,",
				"          acquisition_method_raw = acquisition_method,",
				"          artist_id,",
				"          artist_name = Artist_name,",
				"          artist_birth_raw,",
				"          artist_death_raw,",
				"          artist_gender = gender,",
				"          artist_country = artist_county,",
				"          artist_group,",
				"          dimension_unit,",
				"          measurement_value1,",
				"          measurement_value2,",
				"          medium_classification_raw,",
				"          medium1,",
				"          museum_id,",
				"          museum_name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     truncate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SMK"
			]
		}
	}
}